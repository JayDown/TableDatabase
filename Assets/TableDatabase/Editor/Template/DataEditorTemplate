using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

public class $(DataClassName)DataEditor : EditorWindow
{
    [MenuItem("Table/Tables/$(TableShowName)", priority = 30)]
    static void CreateTable()
    {
        EditorWindow.GetWindowWithRect<$(DataClassName)DataEditor>(new Rect(100, 100, 800, 500), false, "$(TableShowName)数据");
    }

    private string[] _searchFieldArray;

    private int _searchFieldIndex = 0;

    private string _searchValue;

    private TableConfig _tableConfig;

    private $(SerializeClassName) _serializeData;

    private Dictionary<int, $(DataClassName)> _searchDataDic;

    private $(DataClassName) _tempData;

    private bool _isSearch = false;

    private Vector2 _listScollViewVec;

    private Vector2 _infoScollViewVec;

    private int _onceShowCount = 10;

    private int _pageNum = 1;

    private int _pageMaxNum = 1;

    private Dictionary<string, List<object>> _foreignKeyDic;

    private Dictionary<$(PrimaryType), int> _primaryKeyDataDic;

    SerializedObject _serializedObject;

    SerializedProperty _serializedProperty;

    SerializedProperty _tempSerializedProperty;

    private $(PrimaryType) _primaryKey;

    void OnGUI()
    {
        if (_serializeData == null)
        {
            return;
        }
        GUILayout.BeginHorizontal("sv_iconselector_back");
        GUILayout.BeginVertical();
        ShowDataList();
        GUILayout.EndVertical();
        GUILayout.BeginVertical();
        ShowDataInfo();
        GUILayout.EndVertical();
        GUILayout.EndHorizontal();
    }

    /// <summary>
    /// 显示数据列表
    /// </summary>
    private void ShowDataList()
    {
        GUI.SetNextControlName("DataList");
        GUILayout.BeginArea(new Rect(10, 10, 200, 480), "", "box");
        GUI.color = new Color(0.8f, 0.8f, 0.8f);
        GUILayout.BeginHorizontal("OL Title");
        GUI.color = Color.white;
        GUILayout.Label("数据列表:");
        GUILayout.Label(_serializeData.DataList.Count + "条");
        GUILayout.FlexibleSpace();
        if (GUILayout.Button("添加", "OL Plus"))
        {
            $(DataClassName) data = new $(DataClassName)();
            _serializeData.DataList.Add(data);
            _pageMaxNum = (_serializeData.DataList.Count / _onceShowCount);
            if (_serializeData.DataList.Count % _onceShowCount > 0)
            {
                _pageMaxNum++;
            }
            if (!_primaryKeyDataDic.ContainsKey(data.$(Primary)))
            {
                _primaryKeyDataDic.Add(data.$(Primary), 1);
            }
            else
            {
                _primaryKeyDataDic[data.$(Primary)]++;
            }
            _serializedObject = new SerializedObject(_serializeData);
            _serializedProperty = _serializedObject.FindProperty("DataList");
            EditorUtility.SetDirty(_serializeData);
            AssetDatabase.SaveAssets();
        }
        GUILayout.EndHorizontal();
        GUILayout.Space(5);
        if (_searchFieldArray.Length > 0)
        {
            SearchPanel();
        }
        GUILayout.Space(5);
        GUILayout.BeginArea(new Rect(5, 60, 190, 350));
        _listScollViewVec = GUILayout.BeginScrollView(_listScollViewVec, false, false);
        GUILayout.BeginVertical();
        int removeIndex = -1;
        if (_isSearch)
        {
            foreach (KeyValuePair<int, $(DataClassName)> item in _searchDataDic)
            {
			    $(DataClassName) data = item.Value;
                if (_tempData == data)
                {
                    GUI.color = Color.yellow;
                }
                GUILayout.BeginHorizontal("GroupBox");
                GUI.color = Color.white;
                GUILayout.Label((item.Key + 1).ToString(), GUILayout.Width(40));
                if (GUILayout.Button($(SelectName), "OL Title", GUILayout.Width(50)))
                {
                    _pageNum = (item.Key + 1) / _onceShowCount;
                    if ((item.Key + 1) % _onceShowCount > 0)
                    {
                        _pageNum++;
                    }
                    _tempData = _serializeData.DataList[item.Key];
                    _tempSerializedProperty = _serializedProperty.GetArrayElementAtIndex(item.Key);
                    GUI.FocusControl("DataList");
                }
                GUILayout.FlexibleSpace();
                if (GUILayout.Button("删除", "OL Minus"))
                {
                    removeIndex = item.Key;
                }
                GUILayout.EndHorizontal();
            }
        }
        else
        {
            int begin = (_pageNum - 1) * _onceShowCount;
            int end = Mathf.Min(_pageNum * _onceShowCount, _serializeData.DataList.Count);
            for (int i = begin; i < end; i++)
            {
				$(DataClassName) data = _serializeData.DataList[i];
                if (_tempData == data)
                {
                    GUI.color = Color.yellow;
                }
                GUILayout.BeginHorizontal("GroupBox");
                GUI.color = Color.white;
                GUILayout.Label((i + 1).ToString(), GUILayout.Width(40));
                if (GUILayout.Button($(SelectName), "OL Title", GUILayout.Width(50)))
                {
                    _tempData = _serializeData.DataList[i];
                    _tempSerializedProperty = _serializedProperty.GetArrayElementAtIndex(i);
                    GUI.FocusControl("DataList");
                }
                GUILayout.FlexibleSpace();
                if (GUILayout.Button("删除", "OL Minus"))
                {
                    removeIndex = i;
                }
                GUILayout.EndHorizontal();
            }
        }

        if (removeIndex > -1)
        {
            _serializeData.DataList.RemoveAt(removeIndex);
            int maxNum = (_serializeData.DataList.Count / _onceShowCount);
            if (_serializeData.DataList.Count % _onceShowCount > 0)
            {
                maxNum++;
            }
            if (maxNum < _pageMaxNum)
            {
                _pageNum = Mathf.Max(1, _pageNum - 1);
            }
            _pageMaxNum = maxNum;
            _serializedObject = new SerializedObject(_serializeData);
            _serializedProperty = _serializedObject.FindProperty("DataList");
            EditorUtility.SetDirty(_serializeData);
            AssetDatabase.SaveAssets();
        }
        GUILayout.EndVertical();
        GUILayout.EndScrollView();
        GUILayout.EndArea();
        GUILayout.FlexibleSpace();
        GUILayout.BeginHorizontal();
        GUILayout.Label("显示个数:");
        int tempShowCount = EditorGUILayout.IntSlider(_onceShowCount, 0, 100);
        if (tempShowCount != _onceShowCount)
        {
            _onceShowCount = tempShowCount;
            _pageMaxNum = (_serializeData.DataList.Count / _onceShowCount);
            if (_serializeData.DataList.Count % _onceShowCount > 0)
            {
                _pageMaxNum++;
            }
            _pageNum = 1;
        }
        GUILayout.EndHorizontal();
        GUILayout.Space(5);
        GUILayout.BeginHorizontal();
        if (GUILayout.Button("◀"))
        {
            if (_pageNum != 1)
            {
                _pageNum--;
            }
        }
        GUI.color = Color.black;
        GUILayout.Label(_pageNum + "/" + _pageMaxNum, "InvisibleButton");
        GUI.color = Color.white;
        if (GUILayout.Button("▶"))
        {
            if (_pageNum < _pageMaxNum)
            {
                _pageNum++;
            }
        }
        GUILayout.EndHorizontal();
        GUILayout.Space(5);
        GUILayout.EndArea();

    }

    private void SearchPanel()
    {
        GUILayout.BeginHorizontal();
        _searchFieldIndex = EditorGUILayout.Popup(_searchFieldIndex, _searchFieldArray, "Foldout", GUILayout.Width(50));
        GUILayout.Space(10);
        string str = GUILayout.TextField(_searchValue, "SearchTextField", GUILayout.Width(100));
        if (str != _searchValue)
        {
            _searchDataDic.Clear();
            if (!string.IsNullOrEmpty(str))
            {
                for (int i = 0; i < _serializeData.DataList.Count; i++)
                {
                    $(DataClassName) data = _serializeData.DataList[i];
                    string temp = data.GetType().GetField(_searchFieldArray[_searchFieldIndex]).GetValue(data).ToString();
                    if (temp.Contains(str))
                    {
                        _searchDataDic.Add(i, data);
                    }
                }
                _isSearch = true;
            }
            else
            {
                _isSearch = false;
            }
            _searchValue = str;
        }
        if (string.IsNullOrEmpty(_searchValue))
        {
            GUILayout.Button("", "SearchCancelButtonEmpty", GUILayout.Width(20));
        }
        else
        {
            if (GUILayout.Button("", "SearchCancelButton", GUILayout.Width(20)))
            {
                _searchValue = "";
                _isSearch = false;
                _searchDataDic.Clear();
            }
        }

        GUILayout.EndHorizontal();
    }

    /// <summary>
    /// 显示数据详情
    /// </summary>
    private void ShowDataInfo()
    {
        if (_tempData == null || _tempSerializedProperty == null)
        {
            return;
        }
        GUILayout.BeginArea(new Rect(220, 10, 570, 480), "", "box");

        GUI.color = new Color(0.8f, 0.8f, 0.8f);
        GUILayout.BeginHorizontal("OL Title");
        GUI.color = Color.white;
        GUILayout.Label("数据详情:");
        GUILayout.FlexibleSpace();
        if (GUILayout.Button("保存", "OL Title"))
        {
            EditorUtility.SetDirty(_serializeData);
            AssetDatabase.SaveAssets();
        }
        GUILayout.EndHorizontal();
        GUILayout.Space(5);
        _infoScollViewVec = GUILayout.BeginScrollView(_infoScollViewVec, false, false);
       
$(ShowDataInfo)
        GUILayout.EndScrollView();
		_primaryKey = _tempData.$(Primary);
        _serializedObject.ApplyModifiedProperties();

        if (_primaryKey != _tempData.$(Primary))
        {
            _primaryKeyDataDic[_primaryKey]--;
            if (_primaryKeyDataDic.ContainsKey(_tempData.$(Primary)))
            {
                _primaryKeyDataDic[_tempData.$(Primary)]++;
            }
            else
            {
                _primaryKeyDataDic.Add(_tempData.$(Primary), 1);
            }
        }
        GUILayout.EndArea();
    }

    #region 初始化和功能方法

    private void OnEnable()
    {
        _foreignKeyDic = new Dictionary<string, List<object>>();
        _searchDataDic = new Dictionary<int, $(DataClassName)>();
        _primaryKeyDataDic = new Dictionary<$(PrimaryType), int>();
        for (int i = 0; i < TableDatabaseUtils.TableConfigSerializeData.TableConfigList.Count; i++)
        {
            if (TableDatabaseUtils.TableConfigSerializeData.TableConfigList[i].TableName == "$(DataClassName)")
            {
                _tableConfig = TableDatabaseUtils.TableConfigSerializeData.TableConfigList[i];
                break;
            }
        }
        if (string.IsNullOrEmpty(_tableConfig.DataPath))
        {
            string path = EditorUtility.SaveFilePanelInProject("保存文件", _tableConfig.TableName + ".asset", "asset", "");
            if (string.IsNullOrEmpty(path))
            {
                if (EditorUtility.DisplayDialog("保存失败", "路径为空!!!", "OK"))
                {
                    return;
                }
            }
            _tableConfig.DataPath = path;
            _serializeData = ScriptableObject.CreateInstance<$(SerializeClassName)>();
            EditorUtility.SetDirty(TableDatabaseUtils.TableConfigSerializeData);
            AssetDatabase.CreateAsset(_serializeData, path);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
        }
        else
        {
            _serializeData = AssetDatabase.LoadAssetAtPath<$(SerializeClassName)>(_tableConfig.DataPath);
        }
        _serializedObject = new SerializedObject(_serializeData);
        _serializedProperty = _serializedObject.FindProperty("DataList");
        for (int i = 0; i < _serializeData.DataList.Count; i++)
        {
            $(PrimaryType) key = _serializeData.DataList[i].$(Primary);
            if (!_primaryKeyDataDic.ContainsKey(key))
            {
                _primaryKeyDataDic.Add(key, 1);
            }
            else
            {
                _primaryKeyDataDic[key]++;
            }
        }
        List<string> tempList = new List<string>();
        for (int i = 0; i < _tableConfig.FieldList.Count; i++)
        {
            if (_tableConfig.FieldList[i].FieldType != "List" && _tableConfig.FieldList[i].FieldType != "Vector2" && _tableConfig.FieldList[i].FieldType != "Vector3" && _tableConfig.FieldList[i].FieldType != "Quaternion")
            {
                tempList.Add(_tableConfig.FieldList[i].Name);
            }
            if (_tableConfig.FieldList[i].HasForeignKey)
            {
                _foreignKeyDic.Add(_tableConfig.FieldList[i].ForeignKey, new List<object>());
            }
        }
        _searchFieldArray = tempList.ToArray();
        _pageMaxNum = (_serializeData.DataList.Count / _onceShowCount);
        if (_serializeData.DataList.Count % _onceShowCount > 0)
        {
            _pageMaxNum++;
        }
        _pageNum = 1;
		LoadForeignKey();
    }
	
	private void LoadForeignKey()
    {
        foreach (KeyValuePair<string, List<object>> item in _foreignKeyDic)
        {
            for (int i = 0; i < TableDatabaseUtils.TableConfigSerializeData.TableConfigList.Count; i++)
            {
                if (TableDatabaseUtils.TableConfigSerializeData.TableConfigList[i].TableName == item.Key)
                {
                    TableConfig tableConfig = TableDatabaseUtils.TableConfigSerializeData.TableConfigList[i];
                    if (string.IsNullOrEmpty(tableConfig.DataPath))
                    {
                        break;
                    }
                    ScriptableObject assetObj = AssetDatabase.LoadAssetAtPath<ScriptableObject>(tableConfig.DataPath);
                    object items = assetObj.GetType().GetField("DataList").GetValue(assetObj);
                    if (items != null)
                    {
                        int count = (int)items.GetType().GetProperty("Count").GetValue(items, null);
                        System.Reflection.PropertyInfo property = items.GetType().GetProperty("Item");
                        for (int j = 0; j < count; j++)
                        {
                            object o = property.GetValue(items, new object[] { j });
                            item.Value.Add(o.GetType().GetField(tableConfig.PrimaryKey).GetValue(o));
                        }
                    }
                }
            }
        }
    }

    #endregion

}
